// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  name          String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(SHOPPER)
  brands        Brand[]   @relation("BrandOwner")
  orders        Order[]
  reviews       Review[]
  wishlists     Wishlist[]
  cart          Cart?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  SHOPPER
  BRAND
  ADMIN
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  logoUrl     String?
  customization Json?
  owner       User      @relation("BrandOwner", fields: [ownerId], references: [id])
  ownerId     String
  products    Product[]
  categories  Category[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  slug        String    @unique
  imageUrl    String?
  brand       Brand     @relation(fields: [brandId], references: [id])
  brandId     String
  products    Product[]
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  currency    String    @default("EGP")
  brand       Brand     @relation(fields: [brandId], references: [id])
  brandId     String
  categories  Category[]
  stock       Int
  imageUrl    String?
  arAssetUrl  String?
  arAssets    ARAsset[] // Relation to AR assets
  features    Json?     // Store product features as JSON
  tags        String[]  // Array of tags for better search
  searchVector Unsupported("tsvector")?  // Full-text search vector
  reviews     Review[]
  orderProducts OrderProduct[]
  wishlists   Wishlist[]
  cartItems   CartItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ARAsset {
  id          String    @id @default(uuid())
  url         String    // URL to the AR asset (3D model, texture, etc.)
  type        String    // Type of asset (e.g., "3D_MODEL", "TEXTURE", "ANIMATION")
  metadata    Json?     // Additional metadata about the asset
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  products    OrderProduct[]
  total       Float
  status      OrderStatus @default(PENDING)
  paymentId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

model OrderProduct {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Review {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  product     Product     @relation(fields: [productId], references: [id])
  productId   String
  rating      Int
  comment     String?
  status      ReviewStatus @default(PENDING)
  moderatedBy String?
  moderatedAt DateTime?
  reports     ReviewReport[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

model ReviewReport {
  id        String   @id @default(uuid())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  String
  userId    String   // User who reported
  reason    String
  details   String?
  createdAt DateTime @default(now())
}

model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  products  Product[]
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}
